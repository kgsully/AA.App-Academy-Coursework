const { expect } = require('chai');

const Bejeweled = require("../class/bejeweled.js");

describe ('Bejeweled', function () {

  // Add tests for setting up a basic board
  it('should set up a basic board', function () {

    const grid = [[' ',' ',' ',' ',' ',' ',' ',' '],
                  [' ',' ',' ',' ',' ',' ',' ',' '],
                  [' ',' ',' ',' ',' ',' ',' ',' '],
                  [' ',' ',' ',' ',' ',' ',' ',' '],
                  [' ',' ',' ',' ',' ',' ',' ',' '],
                  [' ',' ',' ',' ',' ',' ',' ',' '],
                  [' ',' ',' ',' ',' ',' ',' ',' '],
                  [' ',' ',' ',' ',' ',' ',' ',' ']];

    const jewelArray = ['游볳', '游꼡', '游본', '游꼖', '游꼙', '游꼚'];

    Bejeweled.gridInitialize(grid, jewelArray);

    // test that all rows / columns are populated
    for(let i = 0; i < grid.length ; i++) {
      expect(grid[i].includes('  ')).to.equal(false);
    }

  });

  // Add tests for a valid swap that matches 3
  it('should determine valid swaps that match 3', function () {

    const grid = [['游본', '游볳', '游본', '游꼙', '游볳', '游꼡', '游볳', '游볳'],
                  ['游꼡', '游꼚', '游볳', '游본', '游볳', '游꼚', '游본', '游꼚'],
                  ['游꼖', '游볳', '游꼚', '游볳', '游본', '游볳', '游본', '游꼖'],
                  ['游본', '游꼚', '游꼖', '游본', '游꼖', '游꼡', '游꼖', '游꼖'],
                  ['游볳', '游꼖', '游볳', '游꼡', '游볳', '游꼖', '游꼙', '游꼡'],
                  ['游꼙', '游꼖', '游볳', '游꼡', '游꼙', '游꼖', '游본', '游볳'],
                  ['游꼖', '游꼚', '游꼙', '游본', '游꼚', '游꼚', '游꼖', '游본'],
                  ['游꼖', '游본', '游꼡', '游꼖', '游본', '游꼙', '游꼚', '游꼖']];

    const validMovesList = {
      '0': [ [ 1, 2 ], [ 2, 2 ] ],
      '1': [ [ 2, 2 ], [ 1, 2 ] ],
      '2': [ [ 1, 2 ], [ 1, 1 ] ],
      '3': [ [ 1, 1 ], [ 1, 2 ] ],
      '4': [ [ 1, 4 ], [ 2, 4 ] ],
      '5': [ [ 2, 4 ], [ 1, 4 ] ],
      '6': [ [ 2, 2 ], [ 2, 1 ] ],
      '7': [ [ 2, 1 ], [ 2, 2 ] ],
      '8': [ [ 2, 3 ], [ 1, 3 ] ],
      '9': [ [ 1, 3 ], [ 2, 3 ] ],
      '10': [ [ 2, 3 ], [ 2, 4 ] ],
      '11': [ [ 2, 4 ], [ 2, 3 ] ],
      '12': [ [ 2, 4 ], [ 2, 3 ] ],
      '13': [ [ 2, 3 ], [ 2, 4 ] ],
      '14': [ [ 2, 5 ], [ 2, 4 ] ],
      '15': [ [ 2, 4 ], [ 2, 5 ] ],
      '16': [ [ 3, 2 ], [ 3, 1 ] ],
      '17': [ [ 3, 1 ], [ 3, 2 ] ],
      '18': [ [ 3, 4 ], [ 3, 5 ] ],
      '19': [ [ 3, 5 ], [ 3, 4 ] ],
      '20': [ [ 3, 6 ], [ 3, 5 ] ],
      '21': [ [ 3, 5 ], [ 3, 6 ] ],
      '22': [ [ 4, 5 ], [ 3, 5 ] ],
      '23': [ [ 3, 5 ], [ 4, 5 ] ],
      '24': [ [ 4, 5 ], [ 3, 5 ] ],
      '25': [ [ 3, 5 ], [ 4, 5 ] ],
      '26': [ [ 5, 1 ], [ 5, 0 ] ],
      '27': [ [ 5, 0 ], [ 5, 1 ] ],
      '28': [ [ 6, 0 ], [ 6, 1 ] ],
      '29': [ [ 6, 1 ], [ 6, 0 ] ],
      '30': [ [ 6, 6 ], [ 6, 5 ] ],
      '31': [ [ 6, 5 ], [ 6, 6 ] ],
      '32': [ [ 7, 6 ], [ 6, 6 ] ],
      '33': [ [ 6, 6 ], [ 7, 6 ] ]}

    let validMoves = Bejeweled.determineValidMoves(grid);

    expect(validMoves).to.deep.equal(validMovesList);


  });

  // Add tests to check if there are no possible valid moves
  it('should determine if there are no possible valid moves', function () {

    let grid = [['游볳','游본','游꼙','游볳','游본','游꼙','游볳','游본'],
                  ['游꼡','游꼖','游꼚','游꼡','游꼖','游꼚','游꼡','游꼖'],
                  ['游본','游꼙','游볳','游본','游꼙','游볳','游본','游꼙'],
                  ['游꼖','游꼚','游꼡','游꼖','游꼚','游꼡','游꼖','游꼚'],
                  ['游꼙','游볳','游본','游꼙','游볳','游본','游꼙','游볳'],
                  ['游꼚','游꼡','游꼖','游꼚','游꼡','游꼖','游꼚','游꼡'],
                  ['游볳','游본','游꼙','游볳','游본','游꼙','游볳','游본'],
                  ['游꼡','游꼖','游꼚','游꼡','游꼖','游꼚','游꼡','游꼖']];

    let validMoves = Bejeweled.determineValidMoves(grid);

    expect(validMoves).to.deep.equal({});

  });

});
