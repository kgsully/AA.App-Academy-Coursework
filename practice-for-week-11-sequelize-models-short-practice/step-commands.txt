
Step 1: Generate migration and model files -

In this step, you want to create a table called Colors with a name column. You will also model this table in Sequelize.
In the terminal, use sequelize-cli to generate a new model and associated migration. Name the model Color and define a name attribute of type string.
When this step is completed you should see two files created, a migration file in the migrations directory and a model file in the models directory.

Command:
    npx sequelize-cli model:generate --name Color --attributes name:string

Output:
    Sequelize CLI [Node: 16.20.2, CLI: 6.2.0, ORM: 6.37.3]

    New model was created at /home/ken/Documents/App Academy/aa-coursework/practice-for-week-11-sequelize-models-short-practice/server/db/models/color.js .
    New migration was created at /home/ken/Documents/App Academy/aa-coursework/practice-for-week-11-sequelize-models-short-practice/server/db/migrations/20240805155343-create-color.js .

Step 4: Run the migration -

Command:
    dotenv npx sequelize-cli db:migrate

Output:
    Sequelize CLI [Node: 16.20.2, CLI: 6.2.0, ORM: 6.37.3]

    Loaded configuration file "config/database.js".
    Using environment "development".
    Executed (default): SELECT 1+1 AS result
    Executed (default): SELECT name FROM `sqlite_master` WHERE type='table' and name!='sqlite_sequence';
    Executed (default): SELECT name FROM sqlite_master WHERE type='table' AND name='SequelizeMeta';
    Executed (default): CREATE TABLE IF NOT EXISTS `SequelizeMeta` (`name` VARCHAR(255) NOT NULL UNIQUE PRIMARY KEY);
    Executed (default): PRAGMA INDEX_LIST(`SequelizeMeta`)
    Executed (default): PRAGMA INDEX_INFO(`sqlite_autoindex_SequelizeMeta_1`)
    Executed (default): SELECT `name` FROM `SequelizeMeta` AS `SequelizeMeta` ORDER BY `SequelizeMeta`.`name` ASC;
    Executed (default): SELECT name FROM sqlite_master WHERE type='table' AND name='SequelizeMeta';
    Executed (default): PRAGMA INDEX_LIST(`SequelizeMeta`)
    Executed (default): PRAGMA INDEX_INFO(`sqlite_autoindex_SequelizeMeta_1`)
    Executed (default): SELECT `name` FROM `SequelizeMeta` AS `SequelizeMeta` ORDER BY `SequelizeMeta`.`name` ASC;
    Executed (default): SELECT name FROM sqlite_master WHERE type='table' AND name='SequelizeMeta';
    Executed (default): PRAGMA INDEX_LIST(`SequelizeMeta`)
    Executed (default): PRAGMA INDEX_INFO(`sqlite_autoindex_SequelizeMeta_1`)
    Executed (default): SELECT `name` FROM `SequelizeMeta` AS `SequelizeMeta` ORDER BY `SequelizeMeta`.`name` ASC;
    == 20240805155343-create-color: migrating =======
    Executed (default): CREATE TABLE IF NOT EXISTS `Colors` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `name` VARCHAR(20) NOT NULL UNIQUE, `createdAt` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP, `updatedAt` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP);
    Executed (default): SELECT name FROM sqlite_master WHERE type='table' AND name='SequelizeMeta';
    Executed (default): PRAGMA INDEX_LIST(`SequelizeMeta`)
    Executed (default): PRAGMA INDEX_INFO(`sqlite_autoindex_SequelizeMeta_1`)
    Executed (default): INSERT INTO `SequelizeMeta` (`name`) VALUES ($1); {"$1":"20240805155343-create-color.js"}
    == 20240805155343-create-color: migrated (0.011s)

    -----> NOTE: server/db/dev.db was created

Step 5: Validate the table creation

Command:
    sqlite3 dev.db        (from within the db directory)
    sqlite> .tables

Output:
    Colors         SequelizeMeta

Command:
    sqlite> .schema Colors

Output:
    CREATE TABLE `Colors` (
        `id` INTEGER PRIMARY KEY AUTOINCREMENT,
        `name` VARCHAR(20) NOT NULL UNIQUE,
        `createdAt` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
        `updatedAt` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP);
